# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print("|".join(row))
    print("-----")

# Function to check if a player has won
def is_winner(board, player):
    # Check rows and columns for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    # Check diagonals for a win
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# Function to check if the board is full
def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

# Function to evaluate the current state of the board
def evaluate(board):
    if is_winner(board, 'X'):
        return -1  # X is the maximizing player
    elif is_winner(board, 'O'):
        return 1   # O is the minimizing player
    elif is_board_full(board):
        return 0   # It's a draw
    else:
        return None

# Minimax function to find the best move for the computer
def minimax(board, depth, maximizing_player):
    score = evaluate(board)
    if score is not None:
        return score

    if maximizing_player:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = ' '  # Undo the move
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = ' '  # Undo the move
                    min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move for the computer
def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '  # Undo the move
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# Example Usage
board = [[' ', ' ', ' '],
         [' ', ' ', ' '],
         [' ', ' ', ' ']]

# Main game loop
while True:
    print_board(board)

    # Player's move
    row = int(input("Enter row (0, 1, or 2): "))
    col = int(input("Enter column (0, 1, or 2): "))

    if board[row][col] == ' ':
        board[row][col] = 'X'
    else:
        print("Cell already occupied. Try again.")
        continue

    # Check if player wins
    if is_winner(board, 'X'):
        print_board(board)
        print("Congratulations! You win!")
        break

    # Check if it's a draw
    if is_board_full(board):
        print_board(board)
        print("It's a draw!")
        break

    # Computer's move
    print("Computer's move:")
    best_move = find_best_move(board)
    board[best_move[0]][best_move[1]] = 'O'

    # Check if computer wins
    if is_winner(board, 'O'):
        print_board(board)
        print("Sorry, you lose. Better luck next time!")
        break

    # Check if it's a draw
    if is_board_full(board):
        print_board(board)
        print("It's a draw!")
        break

