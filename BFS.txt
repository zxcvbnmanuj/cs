def best_first_search(graph, start, goal, heuristic):
    # Initialize the open list with the start node and its heuristic value
    open_list = [(start, heuristic[start])]
    
    # Initialize the closed list to keep track of visited nodes
    closed_list = set()
    
    # Dictionary to store parent nodes
    parent = {}
    
    # Dictionary to store the distance from the start node
    distance = {start: 0}
    
    # Variable to keep track of the total distance of the path
    total_distance = 0
    
    # Continue searching until the open list is empty
    while open_list:
        # Sort the open list based on the heuristic value
        open_list.sort(key=lambda x: x[1])
        
        # Get the current node from the open list
        current_node, _ = open_list.pop(0)
        
        # Check if the current node is the goal node
        if current_node == goal:
            # Reconstruct the path and calculate the total distance
            path = []
            while current_node is not None:
                path.insert(0, current_node)
                if parent.get(current_node):
                    total_distance += graph[current_node][parent[current_node]]
                current_node = parent.get(current_node)
            return path, total_distance
        
        # If the current node is not in the closed list, explore its neighbors
        if current_node not in closed_list:
            closed_list.add(current_node)
            
            # Explore neighbors of the current node
            for neighbor, dist in graph[current_node].items():
                if neighbor not in closed_list:
                    # Update parent, distance, and add to open list with heuristic
                    parent[neighbor] = current_node
                    distance[neighbor] = distance[current_node] + dist
                    open_list.append((neighbor, distance[neighbor] + heuristic[neighbor]))
    
    # If no path is found, return None and 0
    return None, 0

# Example graph (Romania map) and heuristic values
romania_map = {
'Arad': {'Zerind': 75, 'Sibiu': 140, 'Timisoara': 118},
'Zerind': {'Arad': 75, 'Oradea': 71},
'Oradea': {'Zerind': 71, 'Sibiu': 151},
'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu Vilcea':80},
'Timisoara': {'Arad': 118, 'Lugoj': 111},
'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
'Drobeta': {'Mehadia': 75, 'Craiova': 120},
'Craiova': {'Drobeta': 120, 'Rimnicu Vilcea': 146, 'Pitesti': 138},
'Rimnicu Vilcea': {'Sibiu': 80, 'Craiova': 146, 'Pitesti': 97},
'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
'Pitesti': {'Rimnicu Vilcea': 97, 'Craiova': 138, 'Bucharest': 101},
'Bucharest': {'Fagaras': 211, 'Pitesti': 101}
    # ... (graph edges and weights)
}

heuristic = {
'Arad': 366,
'Zerind': 374,
'Oradea': 380,
'Sibiu': 253,
'Timisoara': 329,
'Lugoj': 244,
'Mehadia': 241,
'Drobeta': 242,
'Craiova': 160,
'Rimnicu Vilcea': 193,
'Fagaras': 178,
'Pitesti': 98,
'Bucharest': 0
    # ... (heuristic values for each node)
}

# Specify start and goal cities
start_city = 'Arad'
goal_city = 'Bucharest'

# Perform the best-first search
path, total_distance = best_first_search(romania_map, start_city, goal_city, heuristic)

# Display the result
if path:
    print(f"Shortest path from {start_city} to {goal_city}: {' -> '.join(path)}")
    print(f"Total distance: {total_distance} km")
else:
    print(f"No path found from {start_city} to {goal_city}.")


























import heapq

def best_first_search_shortest_path_heuristic(graph, start, goal, heuristic):
    visited = set()
    heap = [(0, start)]
    while heap:
        (cost, node) = heapq.heappop(heap)
        if node not in visited:
            visited.add(node)
            if node == goal:
                return cost
            for next_node, next_cost in graph[node].items():
                h = heuristic[next_node]
                heapq.heappush(heap, (cost + next_cost + h, next_node))
    return float('inf')

graph = {
    'A': {'B': 5, 'C': 3},
    'B': {'D': 6},
    'C': {'D': 9},
    'D': {}
}
heuristic = {
    'A': 10,
    'B': 6,
    'C': 4,
    'D': 0
}
start = 'A'
goal = 'D'
print(best_first_search_shortest_path_heuristic(graph, start, goal, heuristic))

